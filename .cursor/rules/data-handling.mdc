---
description: 
globs: 
alwaysApply: true
---
# Data Handling and Validation Guidelines

## Server Components for Data Retrieval
All data retrieval operations must be performed in Server Components:

```typescript
// ✅ Correct: Data fetching in Server Component
async function DeckList() {
  const decks = await db.select().from(decksTable);
  return <div>{/* Render decks */}</div>;
}

// ❌ Incorrect: Never fetch data in Client Components
'use client';
function DeckList() {
  const [decks, setDecks] = useState([]);
  // ❌ Don't fetch data here
  useEffect(() => {
    fetch('/api/decks').then(/*...*/);
  }, []);
}
```

## Server Actions for Data Mutations
All database mutations (INSERT, UPDATE, DELETE) must be handled through Server Actions:

```typescript
// ✅ Correct: Server Action for data mutation
export async function createDeck(data: CreateDeckSchema) {
  'use server';
  
  const result = await db.insert(decksTable).values({
    title: data.title,
    description: data.description
  });
  return result;
}

// ❌ Incorrect: Never mutate data through API routes or client-side code
async function handleSubmit() {
  await fetch('/api/decks', {
    method: 'POST',
    body: JSON.stringify(data)
  });
}
```

## Zod Validation and TypeScript Types
All data passed to Server Actions must be validated using Zod schemas and have corresponding TypeScript types:

```typescript
// ✅ Correct: Zod schema with TypeScript type
import { z } from "zod";

const CreateDeckSchema = z.object({
  title: z.string().min(1).max(100),
  description: z.string().optional(),
});

type CreateDeckInput = z.infer<typeof CreateDeckSchema>;

// Server Action with type safety and validation
export async function createDeck(input: CreateDeckInput) {
  'use server';
  
  // Validate input
  const result = CreateDeckSchema.safeParse(input);
  if (!result.success) {
    throw new Error('Invalid input');
  }
  
  // Proceed with validated data
  const data = result.data;
  return await db.insert(decksTable).values(data);
}

// ❌ Incorrect: Never use FormData or untyped data
export async function createDeck(formData: FormData) {
  'use server';
  // Don't work directly with FormData
}
```

## Best Practices
1. Always define Zod schemas in separate files for reusability
2. Use `z.infer<typeof Schema>` to generate TypeScript types from Zod schemas
3. Implement proper error handling for validation failures
4. Keep validation logic separate from business logic
5. Use strong typing throughout the application

## Implementation Example
Here's a complete example of proper data handling:

```typescript
// schemas/deck.ts
import { z } from "zod";

export const CreateDeckSchema = z.object({
  title: z.string().min(1).max(100),
  description: z.string().optional(),
});

export type CreateDeckInput = z.infer<typeof CreateDeckSchema>;

// actions/deck.ts
export async function createDeck(input: CreateDeckInput) {
  'use server';
  
  const result = CreateDeckSchema.safeParse(input);
  if (!result.success) {
    throw new Error(`Validation failed: ${result.error.message}`);
  }
  
  try {
    return await db.insert(decksTable).values(result.data);
  } catch (error) {
    throw new Error('Failed to create deck');
  }
}

// components/DeckForm.tsx
'use client';

export function DeckForm() {
  async function onSubmit(data: CreateDeckInput) {
    try {
      await createDeck(data);
    } catch (error) {
      // Handle error
    }
  }
  
  return (
    <form>{/* Form implementation */}</form>
  );
}
```

Remember:
- Never use API routes for data operations that can be handled by Server Actions
- Always validate data before processing
- Maintain strict TypeScript types throughout the application
- Handle errors appropriately at both validation and execution levels

# Database Interaction Guidelines

This project uses Drizzle ORM for all database interactions. The schema is defined in [src/db/schema.ts](mdc:src/db/schema.ts) and all database queries are centralized in the [src/db/queries](mdc:src/db/queries) directory.

## Directory Structure
```
src/db/
  ├── schema.ts    # Database schema definitions
  ├── index.ts     # Database client configuration
  └── queries/     # Centralized query functions
      ├── decks.ts # Deck-related queries
      ├── cards.ts # Card-related queries
      └── types.ts # Shared types for queries
```

## Required Practices

1. All database queries MUST be defined in the `src/db/queries` directory:
   ```typescript
   // src/db/queries/decks.ts
   import { db } from "@/db";
   import { decksTable } from "@/db/schema";
   
   export async function getDecksByUserId(userId: string) {
     return db
       .select()
       .from(decksTable)
       .where(eq(decksTable.userId, userId));
   }
   ```

2. Components and API routes MUST use query functions instead of direct database access:
   ```typescript
   // ✅ Correct way - Using query function
   import { getDecksByUserId } from "@/db/queries/decks";
   
   export async function GET() {
     const { userId } = auth();
     if (!userId) return new Response("Unauthorized", { status: 401 });
   
     const decks = await getDecksByUserId(userId);
     return Response.json(decks);
   }
   
   // ❌ Wrong way - Direct database access
   export async function GET() {
     const { userId } = auth();
     if (!userId) return new Response("Unauthorized", { status: 401 });
   
     const decks = await db
       .select()
       .from(decksTable)
       .where(eq(decksTable.userId, userId));
     return Response.json(decks);
   }
   ```

3. Query Function Requirements:
   - Must be properly typed using TypeScript
   - Must include userId parameter for user-specific data
   - Must use Drizzle's query builder (no raw SQL)
   - Must handle relationships using defined foreign keys
   - Must be named descriptively (e.g., `getDecksByUserId`, `createCard`)
   - Must be exported as named exports (not default exports)

4. Query Function Organization:
   - Group related queries in domain-specific files (e.g., `decks.ts`, `cards.ts`)
   - Use `types.ts` for shared TypeScript types and interfaces
   - Keep functions focused and single-purpose
   - Document complex queries with JSDoc comments

## Error Handling

Query functions should handle errors consistently:

```typescript
// src/db/queries/decks.ts
export async function createDeck(data: CreateDeckInput) {
  try {
    const deck = await db.insert(decksTable).values(data).returning();
    return { deck, error: null };
  } catch (error) {
    console.error("Failed to create deck:", error);
    return { deck: null, error: "Failed to create deck" };
  }
}
```

## Type Safety

1. Define input/output types for all query functions:
   ```typescript
   // src/db/queries/types.ts
   export interface CreateDeckInput {
     userId: string;
     title: string;
     description?: string;
   }
   
   // src/db/queries/decks.ts
   import type { CreateDeckInput } from "./types";
   
   export async function createDeck(data: CreateDeckInput) {
     // Implementation
   }
   ```

2. Use Drizzle's inferred types where possible:
   ```typescript
   import { decksTable } from "@/db/schema";
   import type { NewDeck } from "@/db/schema";
   ```

## Prohibited Practices

❌ Direct database access outside of query functions
❌ Raw SQL queries
❌ Duplicate query logic across files
❌ Query functions without proper error handling
❌ Query functions without TypeScript types
❌ Default exports for query functions

## Migration Process

When adding new database functionality:

1. Update schema if needed (`schema.ts`)
2. Create/update query functions in `queries/` directory
3. Use new query functions in components/routes
4. Add proper types and error handling
5. Document complex queries

Remember: All database interactions MUST go through query functions in the `src/db/queries` directory. This ensures consistent error handling, type safety, and maintainability.

